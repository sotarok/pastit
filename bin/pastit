#!/usr/bin/env php
<?php

define('PASTIT_CLIENT_VERSION', '0.1.4');

mb_internal_encoding('UTF-8');
mb_detect_order('UTF-8,EUC-JP,eucJp-win,SJIS');

if (!ini_get('register_argc_argv')) {
    echo "please enable register_argc_argv of your php.ini.", PHP_EOL;
    usage();
    exit;
}

$home = getenv('HOME');
$config_file = $home . DIRECTORY_SEPARATOR . '.pastit';
if (!file_exists($config_file)) {
    echo "please setup your $config_file file.", PHP_EOL;
    echo "see your Pastit site config.", PHP_EOL;
    exit;
}
if (!($conf = parse_ini_file($config_file))) {
    echo "illegal ini file. please check your $config_file file.", PHP_EOL;
    exit;
}
$token = isset($conf['token'])? $conf['token'] : false;
if (!$token) {
    echo "token required. please check your $config_file file.", PHP_EOL;
    exit;
}

// specified file
if ($argc > 1) {
    $file = array_pop($argv);
}
else {
    $file = "";
}
$content = "";
$type = false;
$title = "";
if (file_exists($file)) {
    $content = file_get_contents($file);
    $pi = pathinfo($file);
    $title = $pi['basename'];
    $extension = isset($pi['extension']) ? $pi['extension'] : '';
}
else {
    while ($l = fgets(STDIN)) {
        $content .= $l;
    }
}

// encoding detection
$encoding = mb_detect_encoding($content);
if ($encoding != 'UTF-8') {
    $content = mb_convert_encoding($content, 'UTF-8', $encoding);
}

$v = getopt('t:');
if (isset($v['t'])) {
    $type = $v['t'];
}
elseif (!empty($extension)) {
    $type = $extension;
}
else {
    $type = "__pastit_type_none__";
}

if (empty($content)) {
    echo "empty contents", PHP_EOL;
    exit;
}

// post
$data = http_build_query(
    array(
        'content' => $content,
        'content_type' => $type,
        'title' => $title,
        'token' => $token,
        'version' => PASTIT_CLIENT_VERSION,
    )
);

$socks_proxy = isset($conf['socks_proxy'])? $conf['socks_proxy'] : false;

$url = '___url___paste_do';
if ($socks_proxy) {
    if (!extension_loaded('curl')) {
        echo 'error: use socket_proxy required curl extension.', PHP_EOL;
        exit(255);
    }
    $curl = curl_init();
    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt ($curl, CURLOPT_POST, true);
    curl_setopt ($curl, CURLOPT_POSTFIELDS, $data);

    curl_setopt($curl, CURLOPT_PROXY, $socks_proxy);
    curl_setopt($curl, CURLOPT_PROXYTYPE, 7); // CURLPROXY_SOCKS5_HOSTNAME
    $result = curl_exec($curl);
    $r = curl_getinfo($curl);
} else {
    $context_option = array(
        'http' => array(
            'method'  => 'POST',
            'header'  => 'Content-type: application/x-www-form-urlencoded',
            'content' => $data
        )
    );

    $context = stream_context_create($context_option);
    $result = file_get_contents($url, false, $context);
}


echo $result;
echo PHP_EOL;

if (defined('PHP_OS') && PHP_OS == 'Darwin' && is_executable('/usr/bin/pbcopy')) {
    $pp = popen('/usr/bin/pbcopy', 'w');
    fwrite($pp, $result, 1000);
    pclose($pp);
}

function usage()
{
    echo <<<HOGE
Usage:  {$argv[0]}
HOGE;
}
